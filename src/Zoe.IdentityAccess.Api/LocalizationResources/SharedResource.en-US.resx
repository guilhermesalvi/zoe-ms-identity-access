<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->

  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ACCOUNT_EMPTY_CONFIRM_PASSWORD" xml:space="preserve">
    <value>Password confirmation should be informed.</value>
  </data>
  <data name="ACCOUNT_EMPTY_FULL_NAME" xml:space="preserve">
    <value>The full name should be informed</value>
  </data>
  <data name="ACCOUNT_EMPTY_PASSWORD" xml:space="preserve">
    <value>The password should be informed</value>
  </data>
  <data name="ACCOUNT_EMPTY_PREFERRED_NAME" xml:space="preserve">
    <value>The preferred name should be informed.</value>
  </data>
  <data name="ACCOUNT_EMPTY_USER_EMAIL" xml:space="preserve">
    <value>The email should be informed.</value>
  </data>
  <data name="ACCOUNT_INVALID_CONFIRM_PASSWORD" xml:space="preserve">
    <value>The password and its confirmation should be the same.</value>
  </data>
  <data name="ACCOUNT_INVALID_EMAIL_FORMAT" xml:space="preserve">
    <value>The email should be a valid email address.</value>
  </data>
  <data name="ACCOUNT_INVALID_EMAIL_LENGTH" xml:space="preserve">
    <value>The email should be between 5 and 100 characters.</value>
  </data>
  <data name="ACCOUNT_INVALID_FULL_NAME_FORMAT" xml:space="preserve">
    <value>The name should consist of alphabetic characters only.</value>
  </data>
  <data name="ACCOUNT_INVALID_FULL_NAME_LENGTH" xml:space="preserve">
    <value>The name should be between 5 and 100 characters.</value>
  </data>
  <data name="ACCOUNT_INVALID_PASSWORD_LENGTH" xml:space="preserve">
    <value>The password should be between 5 and 100 characters.</value>
  </data>
  <data name="ACCOUNT_INVALID_PREFERRED_NAME_FORMAT" xml:space="preserve">
    <value>The preferred name should consist of alphabetic characters only.</value>
  </data>
  <data name="ACCOUNT_INVALID_PREFERRED_NAME_LENGTH" xml:space="preserve">
    <value>The preference name must be between 2 and 30 characters.</value>
  </data>
  <data name="ACCOUNT_USER_CREATED_SUCCESSFULLY" xml:space="preserve">
    <value>User successfully registered.</value>
  </data>
  <data name="DEFAULT_API_ERROR" xml:space="preserve">
    <value>We had a problem during processing data.</value>
  </data>
  <data name="IDENTITY_CONCURRENCY_FAILURE" xml:space="preserve">
    <value>Optimistic concurrency failure, object has been modified.</value>
  </data>
  <data name="IDENTITY_DEFAULT_ERROR" xml:space="preserve">
    <value>An unknown failure has occurred.</value>
  </data>
  <data name="IDENTITY_DUPLICATE_EMAIL" xml:space="preserve">
    <value>Email is already taken.</value>
  </data>
  <data name="IDENTITY_DUPLICATE_ROLE_NAME" xml:space="preserve">
    <value>Role name is already taken.</value>
  </data>
  <data name="IDENTITY_DUPLICATE_USER_NAME" xml:space="preserve">
    <value>User name is already taken.</value>
  </data>
  <data name="IDENTITY_INVALID_EMAIL" xml:space="preserve">
    <value>Email is invalid.</value>
  </data>
  <data name="IDENTITY_INVALID_ROLE_NAME" xml:space="preserve">
    <value>Role name is invalid.</value>
  </data>
  <data name="IDENTITY_INVALID_TOKEN" xml:space="preserve">
    <value>Invalid token.</value>
  </data>
  <data name="IDENTITY_INVALID_USER_NAME" xml:space="preserve">
    <value>User name is invalid, can only contain letters or digits.</value>
  </data>
  <data name="IDENTITY_LOGIN_ALREADY_ASSOCIATED" xml:space="preserve">
    <value>A user with this login already exists.</value>
  </data>
  <data name="IDENTITY_PASSWORD_MISMATCH" xml:space="preserve">
    <value>Incorrect password.</value>
  </data>
  <data name="IDENTITY_PASSWORD_REQUIRES_DIGIT" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9').</value>
  </data>
  <data name="IDENTITY_PASSWORD_REQUIRES_LOWER" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z').</value>
  </data>
  <data name="IDENTITY_PASSWORD_REQUIRES_NON_ALPHANUMERIC" xml:space="preserve">
    <value>Passwords must have at least one non alphanumeric character.</value>
  </data>
  <data name="IDENTITY_PASSWORD_REQUIRES_UPPER" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z').</value>
  </data>
  <data name="IDENTITY_PASSWORD_TOO_SHORT" xml:space="preserve">
    <value>Passwords must be at least 6 characters.</value>
  </data>
  <data name="IDENTITY_USER_ALREADY_HAS_PASSWORD" xml:space="preserve">
    <value>User already has a password set.</value>
  </data>
  <data name="IDENTITY_USER_ALREADY_IN_ROLE" xml:space="preserve">
    <value>User already in role.</value>
  </data>
  <data name="IDENTITY_USER_LOCKOUT_NOT_ENABLED" xml:space="preserve">
    <value>Lockout is not enabled for this user.</value>
  </data>
  <data name="IDENTITY_USER_NOT_IN_ROLE" xml:space="preserve">
    <value>User is not in role.</value>
  </data>
</root>